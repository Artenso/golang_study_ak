Задание

Реализуй функцию concurrentSafeCounter, которая будет представлять собой конкурентно-безопасный
счетчик с использованием sync.Mutex. Функция должна иметь следующую сигнатуру.

type Counter struct {
}

func (c *Counter) Increment() int {
}

func concurrentSafeCounter() int {
	counter := Counter{}
	for i := 0; i < 1000; i++ {
		go func() {
			counter.Increment()
		}()
	}
	return counter.value
}


Критерии приемки

Функция concurrentSafeCounter должна быть конкурентно-безопасной и предотвращать гонки данных
при одновременном доступе из нескольких горутин.
Функция должна возвращать текущее значение счетчика после каждого вызова.
При каждом вызове функции concurrentSafeCounter значение счетчика должно увеличиваться на 1
Функция должна корректно работать при одновременном вызове из нескольких горутин.
Конечный результат программы должен быть равен 1000, то есть функция concurrentSafeCounter
должна быть вызвана 1000 раз, и каждый раз должно быть возвращено последовательное значение
счетчика от 1 до 1000

Решение расположи по следующему пути: course1/15.gorounes/6.goroune_sync/task1.15.6.2