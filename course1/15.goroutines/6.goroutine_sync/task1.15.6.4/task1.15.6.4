Задание

У тебя есть код, реализующий конкурентный кэш для пользователей на языке программирования Golang.
Кэш позволяет сохранять и получать пользователей по ключу.
Задача — исправить код таким образом, чтобы гарантировать безопасность доступа к данным кэша при
одновременных операциях чтения и записи.

    "fmt"
    "strconv"
    "strings"
    "sync"
    "time"
)

type User struct {
	ID   int
	Name string
}

type Cache struct {
}

func NewCache() *Cache {
}

func (c *Cache) Set(key string, user *User) {
}

func (c *Cache) Get(key string) *User {
}

func keyBuilder(keys ...string) string {
}

func main() {
	cache := NewCache()
	for i := 0; i < 100; i++ {
		go cache.Set(keyBuilder("user", strconv.Itoa(i)), &User{
			ID:   i,
			Name: fmt.Sprint("user-", i),
		})
	}
	time.Sleep(1 * time.Second)
	for i := 0; i < 100; i++ {
		go func(i int) {
			fmt.Println(cache.Get(keyBuilder("user", strconv.Itoa(i))))
		}(i)
	}
}


Критерии приемки

Код предоставляет функцию NewCache(), которая создает новый экземпляр кэша.
Код предоставляет метод Set(key string, user *User), который добавляет объект user в кэш по
указанному ключу key.
Код предоставляет метод Get(key string) *User, который возвращает объект из кэша по указанному
ключу key.
Код должен быть исправлен таким образом, чтобы гарантировать безопасность доступа к данным
кэша при одновременных операциях чтения и записи.
Код предоставляет функцию keyBuilder(keys ...string) string, которая объединяет строки keys в одну
строку, разделенную символом “:”.

Решение расположи по следующему пути: course1/15.gorounes/6.goroune_sync/task1.15.6.4