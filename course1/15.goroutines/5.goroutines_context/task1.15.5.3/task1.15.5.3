Задание:

Реализуй функцию CallService, которая симулирует обращение к двум сервисам — медленному и
быстрому. Функция должна использовать горутины для параллельного выполнения запросов к сервисам.
При этом функция должна возвращать результат выполнения одного из сервисов.


func main() {
	res := CallService()
	fmt.Println(res)
}

func CallService() string {
	data := make(chan string, 2)
	serviceLocator := NewServiceLocator()
	// context.WithCancel(context.Background())
	go func() {
		fmt.Println("slow service done")
	}()
	go func() {
		fmt.Println("fast service done")
	}()
	// Дожидаемся выполнения одной из горутин
	select {
	case <-ctx.Done():
		if len(data) > 1 {
			panic("error: more than one result")
		}
	}
	checkService(serviceLocator)
	return <-data
}

func checkService(s *ServiceLocator) {
	if s.slow {
		panic("error: slow service called")
	}
	if !s.fast {
		panic("error: fast service not called")
	}
}

type ServiceLocator struct {
	client *http.Client
	fast   bool
	slow   bool
}

func NewServiceLocator() *ServiceLocator {
	return &ServiceLocator{
		client: &http.Client{
			Timeout: 5 * time.Second,
		},
	}
}

func (s *ServiceLocator) FastService(ctx context.Context) (string, error) {


func (s *ServiceLocator) SlowService(ctx context.Context) (string, error) {
	defer func() { s.slow = true }()
	time.Sleep(2 * time.Second)
	return s.doRequest(ctx, "https://api.exmo.com/v1/ticker")
}

func (s *ServiceLocator) doRequest(ctx context.Context, url string) (string, error) {
	defer ctx.Done()
	req, err := http.NewRequestWithContext(ctx, http.MethodGet, url, nil)
	if err != nil {
		return "", err
	}
	resp, err := s.client.Do(req)
	if err != nil {
		return "", err
	}
	defer resp.Body.Close()
	if resp.StatusCode != http.StatusOK {
		return "", fmt.Errorf("status code: %d", resp.StatusCode)
	}
	body, err := io.ReadAll(resp.Body)
	if err != nil {
		return "", err
	}
	return string(body), nil
}


Критерии приемки

Функция CallService должна использовать горутины для параллельного выполнения запросов к сервисам.
Функция должна возвращать результат выполнения одного из сервисов.
Если оба сервиса вернули результат, функция должна выбросить ошибку error: more than one result.
При вызове функции CallService должен быть вызван медленный сервис .
При вызове функции CallService должен быть вызван быстрый сервис .
Если медленный сервис не был вызван, функция должна выбросить ошибку error: slow service called.
Если быстрый сервис не был вызван, функция должна выбросить ошибку error: fast service not called.

Решение расположи по следующему пути: course1/15.goroutines/5.goroutines_context/task1.15.5.3