Задание

Реализуй паттерн прокси для кэширования запросов к GitHub. Твоя задача — создать структуру Github,
которая будет оберткой над клиентом GitHub API, а также предоставлять методы для получения списка
гистов и репозиториев пользователя.

"context"
"fmt"
"github.com/google/go-github/v53/github"
"golang.org/x/oauth2"
)

func main() {
	ctx := context.Background()
	ts := oauth2.StaticTokenSource(
		&oauth2.Token{AccessToken: "your_access_token"},
	)
	tc := oauth2.NewClient(ctx, ts)
	client := github.NewClient(tc)
	g := NewGithub(client)
	fmt.Println(g.GetGists(context.Background(), "ptflp"))
	fmt.Println(g.GetRepos(context.Background(), "ptflp"))
}

type RepoLister interface {
	List(ctx context.Context, username string, opt *github.RepositoryListOptions) ([]*github.Repository, *github.Response, error)
}
type GistLister interface {
	List(ctx context.Context, username string, opt *github.GistListOptions) ([]*github.Gist,
		*github.Response, error)
}
type Githuber interface {
	GetGists(ctx context.Context, username string) ([]Item, error)
	GetRepos(ctx context.Context, username string) ([]Item, error)
}
type GithubAdapter struct {
	RepoList RepoLister
	GistList GistLister
}
type GithubProxy struct {
	github Githuber
	cache  map[string][]Item
}

func NewGithubAdapter(githubClient *github.Client) *GithubAdapter {
	g := &GithubAdapter{
		RepoList: githubClient.Repositories,
		GistList: githubClient.Gists,
	}
	return g
}

type Item struct {
	Title       string
	Description string
	Link        string
}

Критерии приемки

Твоя реализация кэширует запросы к GitHub API через клиент github.Client и не выполняет повторные
запросы к GitHub API при повторном вызове методов GetGists и GetRepos с одними и теми же
параметрами.
библиотекой
С использованием моков, покрытие тестами 80%.
Решение расположи по следующему пути: course2/3.paerns/2.paerns_proxy/task2.3.2.2