Задание

Реализуй абстракцию в контексте электронной коммерции.

У тебя есть код, который содержит интерфейс PaymentMethod и две структуры CreditCard и Bitcoin,
реализующие этот интерфейс.

Твоя задача состоит в том, чтобы использовать абстракцию для обработки платежей различными
методами.

package main

import (
	"fmt"
)

type PaymentMethod interface {
	Pay(amount float64) error
}

func ProcessPayment(p PaymentMethod, amount float64) {
	err := p.Pay(amount)
	if err != nil {
		fmt.Println("Не удалось обработать платеж:", err)
	}
}

func main() {
	cc := &CreditCard{balance: 500.00}
	btc := &Bitcoin{balance: 2.00}
	ProcessPayment(cc, 200.00)
	ProcessPayment(btc, 1.00)
}

Тексты ошибок

"недопустимая сумма платежа"
"недостаточный баланс"
"недопустимая сумма платежа"
"недостаточный баланс"
"недопустимая сумма платежа"
"Оплачено 200 с помощью кредитной карты"

«Оплачено [сумма] с помощью кредитной карты».
Платеж с использованием биткоина должен быть успешно обработан и выведено сообщение
«Оплачено [сумма] с помощью биткоина».

Решение расположи по следующему пути: course2/2.oop/1.oop_go/task2.2.1.4